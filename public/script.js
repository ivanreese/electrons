(function() {
  var API, absolutePos, bail, chromaBytes, clearContainer, container, hasMoved, height, imageData, lastMouseX, lastMouseY, lastTime, mouseDist, mouseDx, mouseDy, mouseX, mouseY, mousemove, name, particles, render, renderRequested, requestRender, requestResize, resize, running, setupSurface, surface, surfaces, timeScale, touchmove, white, width, worldTime, zoom;

  API = null;

  surfaces = {
    particles: {
      doSimulate: true,
      doRender: true,
      clear: true
    }
  };

  container = null;

  width = 0;

  height = 0;

  running = false;

  renderRequested = false;

  worldTime = 0;

  lastTime = null;

  timeScale = 1;

  hasMoved = false;

  mouseX = 0;

  mouseY = 0;

  lastMouseX = null;

  lastMouseY = null;

  mouseDx = null;

  mouseDy = null;

  mouseDist = null;

  zoom = 3;

  particles = [];

  absolutePos = function(elm) {
    elm.style.position = "absolute";
    elm.style.top = elm.style.left = "0";
    return elm.style.width = elm.style.height = "100%";
  };

  setupSurface = function(surface) {
    surface.canvas = document.createElement("canvas");
    container.appendChild(surface.canvas);
    absolutePos(surface.canvas);
    surface.context = surface.canvas.getContext("2d");
    return typeof surface.setup === "function" ? surface.setup(surface) : void 0;
  };

  clearContainer = function() {
    return container.innerHTML = "";
  };

  resize = function() {
    var name, surface;
    zoom = Math.max(2, 1 + (container.offsetHeight * container.offsetWidth) / (500 * 500) | 0);
    width = container.offsetWidth / zoom | 0;
    height = container.offsetHeight / zoom | 0;
    for (name in surfaces) {
      surface = surfaces[name];
      surface.canvas.width = width;
      surface.canvas.height = height;
      if (typeof surface.resize === "function") {
        surface.resize(surface);
      }
      surface.canvas.style.filter = "blur(" + (zoom / 2 | 0) + "px)";
    }
    null;
    return console.log(zoom / 2 | 0);
  };

  requestResize = function() {
    var heightChanged, widthChanged;
    widthChanged = 2 < Math.abs(width - container.offsetWidth);
    heightChanged = 50 < Math.abs(height - container.offsetHeight);
    if (widthChanged || heightChanged) {
      return requestAnimationFrame(function(time) {
        var first;
        first = true;
        resize();
        if (!renderRequested) {
          return render();
        }
      });
    }
  };

  mousemove = function(e) {
    hasMoved = true;
    mouseX = e.clientX / zoom;
    return mouseY = e.clientY / zoom;
  };

  touchmove = function(e) {
    e.preventDefault();
    hasMoved = true;
    mouseX = e.touches[0].clientX / zoom;
    return mouseY = e.touches[0].clientY / zoom;
  };

  chromaBytes = [[0x88, 0x00, 0x00], [0x8b, 0x00, 0x00], [0x8f, 0x00, 0x01], [0x93, 0x00, 0x01], [0x96, 0x00, 0x01], [0x9a, 0x00, 0x02], [0x9d, 0x00, 0x02], [0xa1, 0x00, 0x02], [0xa4, 0x00, 0x02], [0xa8, 0x00, 0x02], [0xac, 0x00, 0x02], [0xaf, 0x00, 0x02], [0xb3, 0x00, 0x02], [0xb7, 0x00, 0x02], [0xbb, 0x00, 0x02], [0xbe, 0x00, 0x02], [0xc2, 0x00, 0x02], [0xc6, 0x00, 0x02], [0xc9, 0x00, 0x02], [0xcd, 0x00, 0x02], [0xd1, 0x00, 0x02], [0xd5, 0x00, 0x02], [0xd9, 0x00, 0x02], [0xdc, 0x00, 0x01], [0xe0, 0x00, 0x01], [0xe4, 0x00, 0x01], [0xe8, 0x00, 0x01], [0xec, 0x00, 0x01], [0xf0, 0x00, 0x01], [0xf4, 0x00, 0x01], [0xf8, 0x00, 0x00], [0xfc, 0x00, 0x00], [0xff, 0x02, 0x00], [0xff, 0x13, 0x00], [0xff, 0x1e, 0x00], [0xff, 0x25, 0x00], [0xff, 0x2c, 0x00], [0xff, 0x32, 0x00], [0xff, 0x37, 0x00], [0xff, 0x3c, 0x00], [0xff, 0x40, 0x00], [0xff, 0x44, 0x00], [0xff, 0x48, 0x00], [0xff, 0x4c, 0x00], [0xff, 0x50, 0x00], [0xff, 0x53, 0x00], [0xff, 0x56, 0x00], [0xff, 0x5a, 0x00], [0xff, 0x5d, 0x00], [0xff, 0x60, 0x00], [0xff, 0x63, 0x00], [0xff, 0x66, 0x00], [0xff, 0x69, 0x00], [0xff, 0x6c, 0x00], [0xff, 0x6f, 0x00], [0xff, 0x71, 0x00], [0xff, 0x74, 0x00], [0xff, 0x77, 0x00], [0xff, 0x79, 0x00], [0xff, 0x7c, 0x00], [0xff, 0x7f, 0x00], [0xff, 0x81, 0x00], [0xff, 0x84, 0x00], [0xff, 0x86, 0x00], [0xff, 0x89, 0x00], [0xff, 0x8c, 0x00], [0xff, 0x8e, 0x00], [0xff, 0x91, 0x00], [0xff, 0x94, 0x00], [0xff, 0x97, 0x00], [0xff, 0x9a, 0x00], [0xff, 0x9c, 0x00], [0xff, 0x9f, 0x00], [0xff, 0xa2, 0x00], [0xff, 0xa5, 0x00], [0xff, 0xa7, 0x00], [0xff, 0xaa, 0x00], [0xff, 0xad, 0x00], [0xff, 0xaf, 0x00], [0xff, 0xb2, 0x00], [0xff, 0xb5, 0x00], [0xff, 0xb7, 0x00], [0xff, 0xba, 0x00], [0xff, 0xbc, 0x00], [0xff, 0xbf, 0x00], [0xff, 0xc2, 0x00], [0xff, 0xc4, 0x00], [0xff, 0xc7, 0x00], [0xff, 0xc9, 0x00], [0xff, 0xcc, 0x00], [0xff, 0xcf, 0x00], [0xff, 0xd1, 0x00], [0xff, 0xd4, 0x00], [0xff, 0xd6, 0x00], [0xff, 0xd9, 0x00], [0xff, 0xdb, 0x00], [0xff, 0xdd, 0x0e], [0xff, 0xde, 0x22], [0xff, 0xdf, 0x30], [0xff, 0xe0, 0x3b], [0xff, 0xe1, 0x44], [0xff, 0xe2, 0x4d], [0xff, 0xe3, 0x55], [0xff, 0xe4, 0x5d], [0xff, 0xe5, 0x65], [0xff, 0xe6, 0x6c], [0xff, 0xe7, 0x73], [0xff, 0xe8, 0x7a], [0xff, 0xe9, 0x81], [0xff, 0xeb, 0x88], [0xff, 0xec, 0x8e], [0xff, 0xed, 0x95], [0xff, 0xee, 0x9b], [0xff, 0xef, 0xa2], [0xff, 0xf0, 0xa9], [0xff, 0xf1, 0xaf], [0xff, 0xf2, 0xb5], [0xff, 0xf3, 0xbc], [0xff, 0xf4, 0xc2], [0xff, 0xf5, 0xc9], [0xff, 0xf6, 0xcf], [0xff, 0xf8, 0xd5], [0xff, 0xf9, 0xdc], [0xff, 0xfa, 0xe2], [0xff, 0xfb, 0xe9], [0xff, 0xfc, 0xef], [0xff, 0xfd, 0xf5], [0xff, 0xfe, 0xfc], [0xfd, 0xfe, 0xff], [0xf8, 0xfd, 0xff], [0xf3, 0xfc, 0xff], [0xee, 0xfb, 0xff], [0xea, 0xfa, 0xff], [0xe5, 0xf9, 0xff], [0xe0, 0xf8, 0xff], [0xdb, 0xf7, 0xff], [0xd6, 0xf6, 0xff], [0xd1, 0xf5, 0xff], [0xcc, 0xf4, 0xff], [0xc6, 0xf3, 0xff], [0xc1, 0xf2, 0xff], [0xbc, 0xf1, 0xff], [0xb6, 0xf0, 0xff], [0xb0, 0xef, 0xff], [0xab, 0xee, 0xff], [0xa5, 0xed, 0xff], [0x9f, 0xec, 0xff], [0x98, 0xeb, 0xff], [0x92, 0xea, 0xff], [0x8b, 0xe9, 0xff], [0x84, 0xe7, 0xff], [0x7d, 0xe6, 0xff], [0x75, 0xe5, 0xff], [0x6d, 0xe4, 0xff], [0x64, 0xe3, 0xff], [0x5a, 0xe2, 0xff], [0x4f, 0xe1, 0xff], [0x42, 0xe0, 0xff], [0x31, 0xdf, 0xff], [0x17, 0xdd, 0xff], [0x04, 0xdb, 0xff], [0x0a, 0xd9, 0xff], [0x0f, 0xd6, 0xff], [0x13, 0xd3, 0xff], [0x16, 0xd0, 0xff], [0x18, 0xce, 0xff], [0x1a, 0xcb, 0xff], [0x1b, 0xc8, 0xff], [0x1d, 0xc6, 0xff], [0x1e, 0xc3, 0xff], [0x1f, 0xc0, 0xff], [0x1f, 0xbe, 0xff], [0x20, 0xbb, 0xff], [0x20, 0xb8, 0xff], [0x21, 0xb6, 0xff], [0x21, 0xb3, 0xff], [0x20, 0xb0, 0xff], [0x20, 0xae, 0xff], [0x20, 0xab, 0xff], [0x1f, 0xa8, 0xff], [0x1e, 0xa6, 0xff], [0x1d, 0xa3, 0xff], [0x1c, 0xa0, 0xff], [0x1b, 0x9e, 0xff], [0x19, 0x9b, 0xff], [0x18, 0x98, 0xff], [0x15, 0x96, 0xff], [0x13, 0x93, 0xff], [0x10, 0x91, 0xff], [0x0c, 0x8e, 0xff], [0x07, 0x8b, 0xff], [0x01, 0x89, 0xff], [0x06, 0x86, 0xff], [0x0d, 0x83, 0xff], [0x12, 0x80, 0xff], [0x16, 0x7d, 0xff], [0x19, 0x7a, 0xff], [0x1b, 0x77, 0xff], [0x1d, 0x73, 0xff], [0x1f, 0x70, 0xff], [0x20, 0x6d, 0xff], [0x21, 0x6a, 0xff], [0x22, 0x67, 0xff], [0x23, 0x64, 0xff], [0x24, 0x61, 0xff], [0x24, 0x5d, 0xff], [0x24, 0x5a, 0xff], [0x24, 0x57, 0xff], [0x24, 0x53, 0xff], [0x24, 0x50, 0xff], [0x23, 0x4c, 0xff], [0x22, 0x48, 0xff], [0x22, 0x45, 0xff], [0x21, 0x41, 0xff], [0x1f, 0x3d, 0xff], [0x1e, 0x39, 0xff], [0x1c, 0x34, 0xff], [0x1a, 0x30, 0xff], [0x18, 0x2b, 0xff], [0x15, 0x26, 0xff], [0x11, 0x1f, 0xff], [0x0d, 0x18, 0xff], [0x07, 0x0f, 0xff], [0x01, 0x02, 0xff], [0x00, 0x00, 0xfc], [0x00, 0x00, 0xf8], [0x00, 0x00, 0xf4], [0x00, 0x00, 0xf0], [0x00, 0x00, 0xec], [0x00, 0x00, 0xe8], [0x00, 0x00, 0xe4], [0x00, 0x00, 0xe0], [0x00, 0x00, 0xdd], [0x00, 0x00, 0xd9], [0x00, 0x00, 0xd5], [0x00, 0x00, 0xd1], [0x00, 0x00, 0xcd], [0x00, 0x00, 0xca], [0x00, 0x00, 0xc6], [0x00, 0x00, 0xc2], [0x00, 0x00, 0xbe], [0x00, 0x00, 0xbb], [0x00, 0x00, 0xb7], [0x00, 0x00, 0xb3], [0x00, 0x00, 0xaf], [0x00, 0x00, 0xac], [0x00, 0x00, 0xa8], [0x00, 0x00, 0xa5], [0x00, 0x00, 0xa1], [0x00, 0x00, 0x9d], [0x00, 0x00, 0x9a], [0x00, 0x00, 0x96], [0x00, 0x00, 0x93], [0x00, 0x00, 0x8f], [0x00, 0x00, 0x8c], [0x00, 0x00, 0x88]];

  white = [255, 255, 255];

  window.addEventListener("click", function() {
    return particles[0].charge *= -1;
  });

  window.addEventListener("touchstart", function() {
    return particles[0].charge *= -1;
  });

  surfaces.particles.move = function() {
    var particle;
    particle = particles[0];
    particle.x = mouseX;
    particle.y = mouseY;
    particle.vx = 0;
    return particle.vy = 0;
  };

  imageData = null;

  surfaces.particles.resize = function(surface) {
    var charge, i, k, nParticles, ref;
    surface.context.fillStyle = "white";
    surface.context.fillRect(0, 0, width, height);
    imageData = surface.context.getImageData(0, 0, width, height);
    nParticles = 20;
    charge = 1;
    if (particles.length !== 0) {
      return;
    }
    for (i = k = 0, ref = nParticles; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      particles.push({
        x: Math.random() * width,
        y: Math.random() * height,
        vx: 0,
        vy: 0,
        charge: Math.random() >= 0.5 ? 1 : -1
      });
    }
    return null;
  };

  surfaces.particles.simulate = function(ctx, t) {
    var angle, dist, dx, dy, i, j, k, len, len1, len2, m, n, pair, particle, results, strength;
    for (i = k = 0, len = particles.length; k < len; i = ++k) {
      particle = particles[i];
      for (j = m = 0, len1 = particles.length; m < len1; j = ++m) {
        pair = particles[j];
        if (!(j > i)) {
          continue;
        }
        dx = pair.x - particle.x;
        dy = pair.y - particle.y;
        dist = .1 + Math.sqrt(Math.sqrt(dx * dx + dy * dy));
        strength = width / 200 / dist;
        if (particle.charge === pair.charge) {
          strength *= -1;
        }
        angle = Math.atan2(dy, dx);
        particle.vx += Math.cos(angle) * strength;
        particle.vy += Math.sin(angle) * strength;
        pair.vx -= Math.cos(angle) * strength;
        pair.vy -= Math.sin(angle) * strength;
      }
    }
    results = [];
    for (n = 0, len2 = particles.length; n < len2; n++) {
      particle = particles[n];
      particle.vx = Math.max(-5, Math.min(5, particle.vx * .99));
      particle.vy = Math.max(-5, Math.min(5, particle.vy * .99));
      if (particle.x > width) {
        particle.vx += 0.1 * -(particle.x - width);
      }
      if (particle.y > height) {
        particle.vy += 0.1 * -(particle.y - height);
      }
      if (particle.x < 0) {
        particle.vx += 0.1 * -particle.x;
      }
      if (particle.y < 0) {
        particle.vy += 0.1 * -particle.y;
      }
      particle.x += particle.vx;
      results.push(particle.y += particle.vy);
    }
    return results;
  };

  surfaces.particles.render = function(ctx, t) {
    var absCharge, charge, chargeSign, color, dSquared, dx, dy, k, l, lastCharge, len, particle, pixelStart, val, x, y;
    pixelStart = 0;
    lastCharge = null;
    color = null;
    while (pixelStart < imageData.data.length) {
      charge = 0;
      x = pixelStart / 4 % width | 0;
      y = pixelStart / 4 / width | 0;
      for (k = 0, len = particles.length; k < len; k++) {
        particle = particles[k];
        dx = x - particle.x;
        dy = y - particle.y;
        dSquared = Math.sqrt(dx * dx + dy * dy);
        charge += width / 60 * particle.charge / dSquared;
      }
      if (charge !== lastCharge) {
        charge === lastCharge;
        absCharge = Math.abs(charge);
        chargeSign = absCharge / charge;
        val = chargeSign * Math.pow(absCharge, .9);
        l = Math.max(0, Math.min(255, (val + 1) * 127));
        color = chromaBytes[l | 0];
      }
      imageData.data[pixelStart] = color[0];
      imageData.data[pixelStart + 1] = color[1];
      imageData.data[pixelStart + 2] = color[2];
      pixelStart += 4;
    }
    ctx.putImageData(imageData, 0, 0);
    return true;
  };

  requestRender = function() {
    if (!renderRequested) {
      renderRequested = true;
      return requestAnimationFrame(render);
    }
  };

  bail = function(fn) {
    lastMouseX = null;
    lastMouseY = null;
    return typeof fn === "function" ? fn() : void 0;
  };

  render = function(currentTime) {
    var deltaMs, dt, name, surface;
    renderRequested = false;
    if (running) {
      requestRender();
    }
    if (document.hidden) {
      return bail(null);
    }
    if (isNaN(currentTime)) {
      return bail(requestRender);
    }
    if (lastTime == null) {
      lastTime = currentTime - 16;
    }
    deltaMs = Math.min(50, currentTime - lastTime);
    dt = timeScale / 1000 * deltaMs;
    lastTime = currentTime;
    worldTime += dt;
    if (hasMoved & (lastMouseX != null)) {
      mouseDx = lastMouseX - mouseX;
      mouseDy = lastMouseY - mouseY;
      mouseDist = Math.sqrt(mouseDx * mouseDx + mouseDy * mouseDy);
    } else {
      lastMouseX = mouseX;
      lastMouseY = mouseY;
      mouseDx = 0;
      mouseDy = 0;
      mouseDist = 0;
    }
    for (name in surfaces) {
      surface = surfaces[name];
      if (!surface.doSimulate) {
        continue;
      }
      if (hasMoved) {
        if (typeof surface.move === "function") {
          surface.move(mouseX, mouseY, worldTime, dt);
        }
      }
      if (typeof surface.simulate === "function") {
        surface.simulate(worldTime, dt);
      }
    }
    for (name in surfaces) {
      surface = surfaces[name];
      if (!(surface.doSimulate && surface.doRender)) {
        continue;
      }
      if (surface.clear && surface.needsClear) {
        surface.context.clearRect(0, 0, width, height);
      }
      surface.needsClear = typeof surface.render === "function" ? surface.render(surface.context, worldTime, dt) : void 0;
    }
    hasMoved = false;
    lastMouseX = mouseX;
    return lastMouseY = mouseY;
  };

  running = true;

  container = document.body;

  absolutePos(container);

  for (name in surfaces) {
    surface = surfaces[name];
    setupSurface(surface);
  }

  window.addEventListener("mousemove", mousemove);

  window.addEventListener("touchmove", touchmove, {
    passive: false
  });

  window.addEventListener("resize", requestResize);

  window.addEventListener("gesturestart", function(e) {
    return e.preventDefault();
  });

  document.body.addEventListener("gesturestart", function(e) {
    return e.preventDefault();
  });

  resize();

  render();

}).call(this);
